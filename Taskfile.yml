version: '3'

output: group

includes:
  k8s:
    taskfile: taskfiles/kind.yaml
    flatten: true

vars:
  PROJECT_NAME: mcp-apache-spark-history-server
  PYTHON_VERSION: 3.12
  OS: '{{OS}}'
  ARCH: '{{ARCH}}'
  BIN_DIR: .bin

run: once
silent: true

tasks:
  check-uv:
    desc: Check if uv is installed and install if needed
    internal: true
    cmds:
      - |
        if ! command -v uv &> /dev/null; then
          echo "📦 Installing uv..."
          curl -LsSf https://astral.sh/uv/install.sh | sh
          export PATH="$HOME/.local/bin:$PATH"
          echo "✅ uv installed! Please restart your terminal or run: export PATH=\"\$HOME/.local/bin:\$PATH\""
        else
          echo "✅ uv is already installed"
        fi

  install:
    desc: Install project dependencies
    deps: [check-uv]
    cmds:
      - uv sync --group dev --frozen
      - echo "✅ Dependencies installed!"

  lint:
    desc: Run code linting with ruff
    cmds:
      - uv run ruff check .
      - echo "✅ Linting completed!"

  format:
    desc: Format code with ruff
    cmds:
      - uv run ruff format .
      - echo "✅ Code formatted!"

  lint-fix:
    desc: Run linting with auto-fix
    cmds:
      - uv run ruff check --fix .
      - echo "✅ Linting issues fixed!"

  type-check:
    desc: Run type checking with mypy
    cmds:
      - uv run mypy *.py --ignore-missing-imports
      - echo "✅ Type checking completed!"

  test:
    desc: Run tests with pytest
    cmds:
      - uv run pytest --cov=. -cov-report=xml --cov-report=term-missing .
      - echo "✅ Tests completed!"

  test-e2e:
    desc: Run end-to-end tests with Spark and MCP servers
    deps: [start-spark-bg, start-mcp-bg]
    cmds:
      - echo "🧪 Starting end-to-end tests..."
      - |
        echo "Running e2e tests..."
        uv run pytest tests/e2e.py -v
      - task: stop-all

  test-verbose:
    desc: Run tests with verbose output
    cmds:
      - uv run pytest -v --cov=. --cov-report=term-missing

  security:
    desc: Run security scan with bandit
    cmds:
      - uv run bandit -r . -f json -o bandit-report.json || true
      - uv run bandit -r . -f txt
      - echo "✅ Security scan completed! Check bandit-report.json"

  pre-commit:
    desc: Run all pre-commit checks
    deps: [pre-commit-install]
    cmds:
      - uv run pre-commit run --all-files
      - echo "✅ Pre-commit checks completed!"

  pre-commit-install:
    desc: Install pre-commit hooks
    internal: true
    cmds:
      - uv run pre-commit install
      - echo "✅ Pre-commit hooks installed!"

  clean:
    desc: Clean build artifacts and cache
    cmds:
      - rm -rf __pycache__/
      - rm -rf .pytest_cache/
      - rm -rf .coverage
      - rm -rf htmlcov/
      - rm -rf .mypy_cache/
      - rm -rf bandit-report.json
      - find . -type f -name "*.pyc" -delete
      - find . -type d -name "__pycache__" -delete
      - echo "✅ Cleanup completed!"

  start-spark:
    desc: Start local Spark History Server for testing
    interactive: true
    vars:
      SPARK_VERSION: '{{.spark_version | default "3.5.5"}}'
    cmds:
      - ./start_local_spark_history.sh --spark-version={{.SPARK_VERSION}}
      - task: wait-for-spark
      - echo "🔥 Spark History Server started!"

  start-spark-bg:
    desc: Start local Spark History Server in background
    vars:
      SPARK_VERSION: '{{.spark_version | default "3.5.5"}}'
    cmds:
      - |
        echo "Starting Spark History Server in background..."
        nohup ./start_local_spark_history.sh --spark-version={{.SPARK_VERSION}} > spark-history.log 2>&1 &
      - task: wait-for-spark

  start-mcp:
    desc: Start MCP server
    interactive: true
    cmds:
      - uv run -m spark_history_mcp.core.main --frozen
      - task: wait-for-mcp

  start-mcp-bg:
    desc: Start MCP server in background
    cmds:
      - |
        echo "Starting MCP server in background..."
        bash -c 'nohup uv run -m spark_history_mcp.core.main > mcp-server.log 2>&1 &'

      - task: wait-for-mcp
    status:
      - pgrep -f "spark_history_mcp.core.main" > /dev/null

  start-inspector:
    desc: Start MCP Inspector for testing
    interactive: true
    cmds:
      - echo "Starting MCP Inspector at http://localhost:6274"
      - echo "Press Ctrl+C to stop the inspector"
      - DANGEROUSLY_OMIT_AUTH=true npx --yes @modelcontextprotocol/inspector

  start-inspector-bg:
    desc: Start MCP Inspector in background
    cmds:
      - |
        echo "Starting MCP Inspector in background..."
        nohup sh -c 'DANGEROUSLY_OMIT_AUTH=true npx --yes @modelcontextprotocol/inspector' > inspector.log 2>&1 &
        sleep 3
        echo "✅ MCP Inspector started at http://localhost:6274"

  dev-all:
    desc: Start all development services and prepare for testing
    cmds:
      - task: start-spark-bg
      - task: start-mcp-bg
      - sleep 1
      - |
        echo ""
        echo "🎉 All services are running!"
        echo ""
        echo "🌐 Spark History Server: http://localhost:18080"
        echo "🚀 MCP Server: http://localhost:18888"
        echo ""
        echo "Next steps:"
        echo "  • Run: task start-inspector (foreground, press Ctrl+C to stop)"
        echo "  • Or: task start-inspector-bg (background)"
        echo "  • Then open: http://localhost:6274"
        echo ""
        echo "To stop all services: task stop-all"
        echo ""

  stop-all:
    desc: Stop all background services
    cmds:
      - |
        echo "Stopping all services..."
        pkill -f "start_local_spark_history.sh" || true
        pkill -f "spark_history_mcp.core.main" || true
        pkill -f "inspector" || true
        docker stop spark-history-server 2>/dev/null || true
        sleep 1
        echo "✅ All services stopped!"

  validate:
    desc: Run all validation checks (lint, type-check, test)
    deps: [lint, test]
    cmds:
      - echo "✅ All validations passed!"

  ci:
    desc: Run full CI pipeline locally
    deps: [lint, test, security]
    cmds:
      - echo "✅ CI pipeline completed successfully!"

  dev-setup:
    desc: Complete development environment setup
    cmds:
      - task: install
      - task: pre-commit-install
      - echo "🎉 Development environment ready!"

  docker-build:
    desc: Build Docker image
    cmds:
      - docker build -t {{.PROJECT_NAME}}:latest --load  .
      - echo "🐳 Docker image built!"

  docker-run:
    desc: Run Docker container
    cmds:
      - docker run -p 18888:18888 {{.PROJECT_NAME}}:latest
      - echo "🐳 Docker container started!"

  wait-for-spark:
    desc: Checks if Spark History Server is running
    internal: true
    cmds:
      - |
        echo "Checking if Spark History Server is running..."
        max_attempts=30
        attempt=1
        while [ $attempt -le $max_attempts ]; do
          if curl -s --connect-timeout 1 http://localhost:18080 > /dev/null; then
            echo "✅ Spark History Server is available on port 18080"
            exit 0
          fi
          echo "Waiting for Spark History Server... ($attempt/$max_attempts)"
          sleep 5
          attempt=$((attempt + 1))
        done
        echo "❌ Timed out waiting for Spark History Server after 60 seconds"
        exit 1

  wait-for-mcp:
    desc: Checks if MCP Server is running
    internal: true
    cmds:
      - |
        echo "Checking if MCP Server is running..."
        max_attempts=30
        attempt=1
        while [ $attempt -le $max_attempts ]; do
          if curl -s --connect-timeout 1 http://localhost:18888 > /dev/null; then
            echo "✅ MCP Server is available on port 18888"
            exit 0
          fi
          echo "Waiting for MCP Server... ($attempt/$max_attempts)"
          sleep 5
          attempt=$((attempt + 1))
        done
        echo "❌ Timed out waiting for MCP Server after 60 seconds"
        exit 1

# Not implemented yet
#  docs-serve:
#    desc: Serve documentation locally (if using mkdocs)
#    cmds:
#      - echo "📚 Documentation server would start here"
#      - echo "💡 Consider adding mkdocs for documentation"
#
#  benchmark:
#    desc: Run performance benchmarks
#    cmds:
#      - echo "🏃 Running performance benchmarks..."
#      - echo "💡 Add specific benchmark commands here"
#
#  release-check:
#    desc: Pre-release validation
#    deps: [clean, install, ci]
#    cmds:
#      - echo "🚀 Release validation completed!"
#      - echo "✅ Ready for release!"
